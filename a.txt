// Lab 3 template file
.data

.global login_name
login_name:
    .asciz "agebre"

.global puid
puid:
    .asciz "0032664042"

.balign 4

.equ TEST_SORT,         0x1
.equ TEST_STRCONCAT,    0x2
.equ TEST_FIB,          0x4
.equ TEST_BSEARCH,      0x8
.equ TEST_ALL,          (TEST_SORT | TEST_STRCONCAT | TEST_FIB | TEST_BSEARCH)

// Replace the TEST_ALL with the tests you want to run
// OR expression also support like the TEST_ALL above
// i.e. replace the TEST_ALL below with TEST_SORT | TEST_STRCONCAT
//      will test on the sort and strconcat
.global test
test:
    .word TEST_SORT


// Align to 4bytes boundary as we have a string above
.balign 4

.text
.global asm_sort_int
asm_sort_int:
    /* void asm_sort_int(int64_t* arr, uint64_t n)
     * relies on `qsort` in C standard library to 
     * sort in ascending order
     **/

    /* Enter your code after this comment */

		//SUB sp, sp, #16
		//str lr, [sp]
		mov x2, #8
		ldr x3 ,=asm_cmp
		sub sp, sp, #16
		str lr, [sp]
		/*
		*/


		bl qsort
		ldr lr, [sp]
		add sp, sp, #16
		//ldp x30, x0, [sp], #16
		//ret lr

    /* Enter your code above this comment */
    ret

.global asm_cmp
asm_cmp:
    // int asm_cmp(const void * a, const void * b)
    // Compare function to int64_t
    // used for qsort
    /* Enter your code after this comment */
	ldr x0, [x0]
	ldr x1, [x1]
	//ldr x2, [x0]
	//ldr x3, [x1]
	//mov x6, #0
	sub x7, x0, x1
	cmp x7, #0
	B.LT LESS_THAN
	//sub x0, x6, x7
	mov x0, #1
	b return
	LESS_THAN:
		mov x0, #-1
		b return
	return:
	//ret lr

    /* Enter your code above this comment */
    ret

.global asm_strconcat
asm_strconcat:
    /* char* asm_strconcat(char * str1, char * str2)
     * First assign memory space with `malloc`, 
     * concatenating `str1` and `str2`, 
     * and return the resulted string.
     **/
    /* Enter your code after this comment */
	ldr x5, [x0] // stores the first character of str1 into x5
	ldr x6, [x1] // stores the first character of str2 into x6
	sub sp, sp, #16
	str lr, [sp]

	bl strlen
	mov x9, x0 // moves n1 into x9


	ldr lr, [sp]
	add sp, sp, #16
////
	sub sp, sp, #16
	str lr, [sp]

	mov x0, x1 //moves char* str2 into x0 so the length can be acquired
	bl strlen

	mov x2, x0 // moves n2 into x2
	mov x8, x0 //stores a copy of n2

	ldr lr, [sp]
	add sp, sp, #16
////
	add x3, x2, x9 // adds n1 and n2 and stores into x3
	add x3, x3, #1 // adds 1 to the value in x3

	mov x0, x3 //moves said value into x0 (n1 + n2 + 1)
	bl malloc
	mov x7, x0 //stores a copy of buf so we can use it after the first use of memcpy
	mov x2, x9 //puts the value of n1 into x2
	mov x1, x5 // puts the value of str1, which is type (char*), into x1
	bl memcpy
	add x0, x7, x9 // adds the value of buf(x7) and n1(x9)



    /* Enter your code above this comment */
    ret

.global asm_fib
asm_fib:
    /* uint64_t asm_fib(uint64_t n)
     * accept an index term `n` and return 
     * the Fn fibonacci term (F0 = 0, F1 = 1)
     **/

    /* Enter your code after this comment */
	// use reference in slide
    /* Enter your code above this comment */
    ret

.global asm_bsearch
asm_bsearch:
    /* int64_t asm_bsearch(int *arr, int key, 
                    int64_t start,
                    int64_t end)
     * Return the index of the element in the array
     * if the element does not exist, return -1 instead
     * arr: integer array to be searched
     * key: the element we want to search on
     * start: start index of subarray, inclusive
     * end: end index of subarray, inclusiveloop through an entire string and only convert
     **/

    /* Enter your code after this comment */

    /* Enter your code above this comment */
    ret
